// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: protocol.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainGameClient is the client API for MainGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainGameClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
	GetRoomState(ctx context.Context, in *GetRoomStateRequest, opts ...grpc.CallOption) (*GetRoomStateResponse, error)
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error)
}

type mainGameClient struct {
	cc grpc.ClientConnInterface
}

func NewMainGameClient(cc grpc.ClientConnInterface) MainGameClient {
	return &mainGameClient{cc}
}

func (c *mainGameClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, "/protocol.MainGame/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainGameClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, "/protocol.MainGame/JoinRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainGameClient) GetRoomState(ctx context.Context, in *GetRoomStateRequest, opts ...grpc.CallOption) (*GetRoomStateResponse, error) {
	out := new(GetRoomStateResponse)
	err := c.cc.Invoke(ctx, "/protocol.MainGame/GetRoomState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainGameClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error) {
	out := new(StartGameResponse)
	err := c.cc.Invoke(ctx, "/protocol.MainGame/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainGameServer is the server API for MainGame service.
// All implementations must embed UnimplementedMainGameServer
// for forward compatibility
type MainGameServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	GetRoomState(context.Context, *GetRoomStateRequest) (*GetRoomStateResponse, error)
	StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error)
	mustEmbedUnimplementedMainGameServer()
}

// UnimplementedMainGameServer must be embedded to have forward compatible implementations.
type UnimplementedMainGameServer struct {
}

func (UnimplementedMainGameServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedMainGameServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedMainGameServer) GetRoomState(context.Context, *GetRoomStateRequest) (*GetRoomStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomState not implemented")
}
func (UnimplementedMainGameServer) StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedMainGameServer) mustEmbedUnimplementedMainGameServer() {}

// UnsafeMainGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainGameServer will
// result in compilation errors.
type UnsafeMainGameServer interface {
	mustEmbedUnimplementedMainGameServer()
}

func RegisterMainGameServer(s grpc.ServiceRegistrar, srv MainGameServer) {
	s.RegisterService(&MainGame_ServiceDesc, srv)
}

func _MainGame_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainGameServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.MainGame/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainGameServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainGame_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainGameServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.MainGame/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainGameServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainGame_GetRoomState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainGameServer).GetRoomState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.MainGame/GetRoomState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainGameServer).GetRoomState(ctx, req.(*GetRoomStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainGame_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainGameServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.MainGame/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainGameServer).StartGame(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MainGame_ServiceDesc is the grpc.ServiceDesc for MainGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.MainGame",
	HandlerType: (*MainGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _MainGame_CreateRoom_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _MainGame_JoinRoom_Handler,
		},
		{
			MethodName: "GetRoomState",
			Handler:    _MainGame_GetRoomState_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _MainGame_StartGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}

// SubGameClient is the client API for SubGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubGameClient interface {
	CreateGameWithInstance(ctx context.Context, in *CreateGameWithInstanceRequest, opts ...grpc.CallOption) (*CreateGameWithInstanceResponse, error)
	PostGameState(ctx context.Context, in *PostGameStateRequest, opts ...grpc.CallOption) (*PostGameStateResponse, error)
	GetGameState(ctx context.Context, in *GetGameStateRequest, opts ...grpc.CallOption) (*GetGameStateResponse, error)
}

type subGameClient struct {
	cc grpc.ClientConnInterface
}

func NewSubGameClient(cc grpc.ClientConnInterface) SubGameClient {
	return &subGameClient{cc}
}

func (c *subGameClient) CreateGameWithInstance(ctx context.Context, in *CreateGameWithInstanceRequest, opts ...grpc.CallOption) (*CreateGameWithInstanceResponse, error) {
	out := new(CreateGameWithInstanceResponse)
	err := c.cc.Invoke(ctx, "/protocol.SubGame/CreateGameWithInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subGameClient) PostGameState(ctx context.Context, in *PostGameStateRequest, opts ...grpc.CallOption) (*PostGameStateResponse, error) {
	out := new(PostGameStateResponse)
	err := c.cc.Invoke(ctx, "/protocol.SubGame/PostGameState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subGameClient) GetGameState(ctx context.Context, in *GetGameStateRequest, opts ...grpc.CallOption) (*GetGameStateResponse, error) {
	out := new(GetGameStateResponse)
	err := c.cc.Invoke(ctx, "/protocol.SubGame/GetGameState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubGameServer is the server API for SubGame service.
// All implementations must embed UnimplementedSubGameServer
// for forward compatibility
type SubGameServer interface {
	CreateGameWithInstance(context.Context, *CreateGameWithInstanceRequest) (*CreateGameWithInstanceResponse, error)
	PostGameState(context.Context, *PostGameStateRequest) (*PostGameStateResponse, error)
	GetGameState(context.Context, *GetGameStateRequest) (*GetGameStateResponse, error)
	mustEmbedUnimplementedSubGameServer()
}

// UnimplementedSubGameServer must be embedded to have forward compatible implementations.
type UnimplementedSubGameServer struct {
}

func (UnimplementedSubGameServer) CreateGameWithInstance(context.Context, *CreateGameWithInstanceRequest) (*CreateGameWithInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameWithInstance not implemented")
}
func (UnimplementedSubGameServer) PostGameState(context.Context, *PostGameStateRequest) (*PostGameStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostGameState not implemented")
}
func (UnimplementedSubGameServer) GetGameState(context.Context, *GetGameStateRequest) (*GetGameStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameState not implemented")
}
func (UnimplementedSubGameServer) mustEmbedUnimplementedSubGameServer() {}

// UnsafeSubGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubGameServer will
// result in compilation errors.
type UnsafeSubGameServer interface {
	mustEmbedUnimplementedSubGameServer()
}

func RegisterSubGameServer(s grpc.ServiceRegistrar, srv SubGameServer) {
	s.RegisterService(&SubGame_ServiceDesc, srv)
}

func _SubGame_CreateGameWithInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameWithInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubGameServer).CreateGameWithInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.SubGame/CreateGameWithInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubGameServer).CreateGameWithInstance(ctx, req.(*CreateGameWithInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubGame_PostGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostGameStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubGameServer).PostGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.SubGame/PostGameState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubGameServer).PostGameState(ctx, req.(*PostGameStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubGame_GetGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubGameServer).GetGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.SubGame/GetGameState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubGameServer).GetGameState(ctx, req.(*GetGameStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubGame_ServiceDesc is the grpc.ServiceDesc for SubGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.SubGame",
	HandlerType: (*SubGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGameWithInstance",
			Handler:    _SubGame_CreateGameWithInstance_Handler,
		},
		{
			MethodName: "PostGameState",
			Handler:    _SubGame_PostGameState_Handler,
		},
		{
			MethodName: "GetGameState",
			Handler:    _SubGame_GetGameState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}
